todo: 

1) reboot, exit to shell and shutdown all work for clients and server, except
	exit to shell doesn't work for server (not that I would ever want to exit to shell on server tho)
2) input for motion sensors (use odata database?)
3) if both win clients are up one should be doing some things - have a way for win clients 
	to talk to each other 

to add new commands:

1) add to the enum in cmd_types.h 
2) add to load_cmds.c 
3) inc the NO_CMDS define in mytypes.h 
4) copy to multi-client.zip (pack) 
5) ssh out to 148 
6) unzip -o ~/multi-client.zip into ~/dev/multi-client directory 
7) go back to either thread_client or thread_server and 
	compile as usual 
	
When changing the number or order of clients:
1) make sure ClientAvail.xml is updated 
2) line 240 in FrmSampleClients.cs needs to be changed:
	clients_avail[7].socket = 1;        // 7 is _SERVER (this is bad!)	
3) The collection field in the combobox of clients in ClientDest.cs 
	needs to be changed or the timer stuff won't work 

'next_client' in tasks.h is used for when client sends msg to other client 
each client needs to keep track of what other clients are logged in so it
can set the 'next_client' to the next one logged in. If 'next_client' is 
set to '0' - currently, the win client sets which client sends to which.

can't send/recv more than 255 bytes using send_msg() or get_msg() (TCP)
If server gets msg to shutdown, reboot, etc. then it must log off all 
clients 
If client(s) gets msg to shutdown, reboot, etc. then server stays up 

In the first case all the commands would be in the cmd_types.h and would 
be limited to 255 total commands. 

146 (server) is where the pi used to be (controlling garage lights)
154 is cabin
147 is other io card in garage near RE system 
150 not used 
151	"
155	"
145	"
