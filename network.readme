todo: 

1) reboot, exit to shell and shutdown all work for clients and server, except
	exit to shell doesn't work for server (not that I would ever want to exit to shell on server tho)
2) input for motion sensors (use odata database?)
3) if both win clients are up one should be doing some things - have a way for win clients 
	to talk to each other 
4) days in client gets reset from 2 to 1 (happened just once)
5) strlen() in some msg's may not send data w/ 0's 
6) SEND_CLIENT_LIST from cmd_tasks to sock_mgt shouldn't need any params (line 306 in cmd_tasks.c) 
7) Hook up temp sensors and use as triggers for ports (heat strips) or warnings 
8) Clients/Server should send a msg back to Winclient after Winclient logs in saying that they 
	already have their time set 
9) 154 turns on ports it's not supposed to (fixed - see line 21 in ioports.h )
	but had to disable monitor_fake_input_task() because of 'bad mask 1' error 
	monitor_fake_input_task reacts to change_input() used in old Truck_Project1 
10) If moonrise is about an hour after sunset, then alert when moon will rise (5 minutes before)
	(so I can go out on the porch and watch the moonrise)
11) Need a 'gate' for all ports controlled by timer schedule, and possibly the same 
		for each port so I can turn it off if I need to conserve power because of
		cloudy days ahead.
12) Look into wheather I can use DIO on 4600 boards to do io for ADC & DS1620 chips
13) get rid of the 'state' field in the cdata. 
14) See if I can fix the problem with 147 by reformatting disk. (Problem is I have to have a 
	ssh screen to run the startup script - it won't work on reboot by itself)
15) Move coop heaters, lights & outdoor lights to 147, replace 147 w/4600 and put 150 in NW corner 
16) change COUNTDOWN_SIZE to NUMDB_RECS and set to 20 and fix real_banks
17) ds1620 dialog must set valid sensors and time intervals.
	
to add new commands:

1) add to the enum in cmd_types.h 
2) add to load_cmds.c 
3) inc the NO_CMDS define in mytypes.h 
4) copy to multi-client.zip (pack) 
5) ssh out to 148 
6) unzip -o ~/multi-client.zip into ~/dev/multi-client directory 
7) go back to either thread_client or thread_server and 
	compile as usual 
	
When changing the number or order of clients:
1) make sure ClientAvail.xml is updated 
2) line 240 in FrmSampleClients.cs needs to be changed:
	clients_avail[8].socket = 1;        // 8 is _SERVER (this is bad!)	
3) The collection field in the combobox of clients in ClientDest.cs 
	needs to be changed or the timer stuff won't work 

'next_client' in tasks.h is used for when client sends msg to other client 
each client needs to keep track of what other clients are logged in so it
can set the 'next_client' to the next one logged in. If 'next_client' is 
set to '0' - currently, the win client sets which client sends to which.

can't send/recv more than 255 bytes using send_msg() or get_msg() (TCP)
If server gets msg to shutdown, reboot, etc. then it must log off all 
clients 
If client(s) gets msg to shutdown, reboot, etc. then server stays up 

In the first case all the commands would be in the cmd_types.h and would 
be limited to 255 total commands. 

146 (server) is where the pi used to be (controlling garage lights)	(offset 8 in client_table[])
154 is cabin	(offset 2 in client_table)
147 is other io card in garage near RE system (testbench)	(offset 3 in client_table)
150 is io card outside garage mounted on back of chicken coop* 
151	"
155	"
145	"

146	8
154 2
147 3
150 4

* may want to have 150 at the nw corner of the garage and have a sep relay board outside for 
	the chicken coops - run the 12v supply out to the relay board as signals for the relays 
	and use 147 for the chicken coop 

when sending array of bytes from WinCl to svr/cl 
array must be 2x what's needed 

	byte test = Convert.ToByte(tbTest.Text);
	byte test2 = Convert.ToByte(tbTest2.Text);

	byte[] bytes = new byte[8];
	bytes[0] = test;
	bytes[1] = test2;
	bytes[2] = 7;
	bytes[3] = 9;
	AddMsg(test.ToString());
	AddMsg(test2.ToString());

	string cmd = "DB_LOOKUP";
	int offset = svrcmd.GetCmdIndexI(cmd);
	svrcmd.Send_ClCmd(offset, 3, bytes);


OUTLINE OF SERVER

WinClReadTask gets msg from windows client 
	if dest = client send tcp msg to client 
	if dest = server send msg to sched_qid get_host_cmd_task (cmd_tasks.c) 

	get_host_cmd_task of sock_mgt:
		sock_mgt: msgrcv(sock_qid...
		send msg to sched_qid
	get_host_cmd_task of sched:
		cmd_tasks: msgrcv(sched_qid...
		send msg to sock_qid
		
ReadTask (1 for each client) 
	recv_tcp(client_table[index].socket...
	if dest = server 
		msgsnd(sched_qid...
	if dest = client, 
		send_msg(client_table[dest].socket... (tcp)

OUTLINE OF CLIENT

get_host_cmd_task2() in cmd_tasks.c of each client waits for msg from sched:
	msgrcv(sched_qid...
		can send msg via send_sock_msg() which does: msgsnd(sock_qid...
	otherwise does IO 	

recv_msg_task in sock_mgt waits for msg: msgrcv(sock_qid...
get_host_cmd_task1 in sock_mgt waits for tcp msg and sends to 
	sched in cmd_tasks.c: msgsnd(sched_qid,
	
idea for detecting if client is still up:
	use START_TIMER/STOP_TIMER msg's to send AREYOUTHERE msg to 
	individual clients for specified period (1 sec, 2 sec, 5 sec) 
	client then responds with its time stamp and server calculates 
	how long it took to respond 
	
there's no lag with client in cabin using a wire across the ground 
as opposed to using the TP-Links. 

system needs to know what time it is (use system time functions) but 
also have a list of sunrise and sunset for the entire year so e.g. it 
can know when to turn lights on/off in chicken coop to extend laying 
time for hens and turn on night lights at dusk. 

ethernet wire colors 
used:
3	light green
6	green 
1	light orange
2	orange 

not used:
5	light blue
4	blue
7	light brown
8	brown 

clients 
get_host_cmd_task1 (sock_mgt.c) -- gets msg from tcp and passes it on to get_host_cmd_task2
	
	recv_tcp(&msg_buf[0],msg_len+1,1);
	...
	msg_snd(sched_qid...) 
	
get_host_cmd_task2 (cmd_tasks.c) 
	msg_rcv(sched_qid...) 
	
a) turn ports on/off over a 24 hour schedule with multiple on/off times 
b) turn ports on/off depending on a temp reading 
c) turn ports on/off depending on 24 hour sched but with sunrise/sunset data 

Use SunriseSunset.exe (C:\Users\Daniel\dev\SunriseSunset\bin\Release\SunriseSunset.exe)
to compile tdata.XML to be used by EpServerEngineSampleClient.exe (Windows Client) 
1) goto https://www.timeanddate.com/sun/@43,-104.803?month=10&year=2022
	(in this example for Oct 2022)
and scrape the spreadsheet starting with '1' to the left of the first sunrise date 
2) paste it to a text file called: tdata[x].csv in C:\Users\Daniel\SunriseSunsetData
	where 'x' is the number of the month (Jan = 1)
3) do this for as many months as you want to catalog
4) goto sunrisesunset.com -> 'Selected U.S. Cities more' -> Wyoming -> 
	chose Manville as location -> choose month/year -> 
	check 'moonrise' & 'moonset' -> 'Make Calendar'
5) scrape webpage of calendar and save to text file called: 
	C:\Users\Daniel\SunriseSunsetData\[xxx].moon where 'xxx' 
	is the name of the file for that month (e.g. Dec.moon)
	do this for as many months as you want to catalog.
6) run this app, then choose the month, then hit 'Open CSV' to create the 
	xml file for as many months to catalog.
7) Then choose the month, 'Open Moon' and choose the *.moon file(s) you 
	want to add to the list 
8) Show Cdata will show all the data from the xml files with the moonrise & moonset 
	columns blank.
9) 'Add Moon' will add in the internal moon list to the internal sunrise/sunset list 
10) Show Cdata again should show both internal lists as the same.
11) 'Create Final XML' will output the entire list to an XML file of your choice.
	
relay modules:
middle: common 
left: no 
right: nc  


/*
	for(i = 0;i < 40;i++)
	{
		printf("%d: %d %d\n",real_banks[i].i, real_banks[i].bank, real_banks[i].index);
	}
this outputs the following:
0: 0 0		// start of 1st card
1: 0 1
2: 0 2
3: 0 3
4: 0 4
5: 0 5
6: 0 6
7: 0 7
8: 1 0	
9: 1 1
10: 1 2
11: 1 3
12: 1 4
13: 1 5
14: 1 6
15: 1 7
16: 2 0
17: 2 1
18: 2 2
19: 2 3

20: 3 0		// start of 2nd card 
21: 3 1
22: 3 2
23: 3 3
24: 3 4
25: 3 5
26: 3 6
27: 3 7
28: 4 0
29: 4 1
30: 4 2
31: 4 3
32: 4 4
33: 4 5
34: 4 6
35: 4 7
36: 5 0
37: 5 1
38: 5 2
39: 5 3
*/

using SET/SEND_CLIENT_LIST 
to set 1 client to send msg 
to the next 

case SET_NEXT_CLIENT:
	next_client = tempx[0];
	if(next_client == 7)
		next_client = 0;
	printf("next client: %d\n",next_client);
	j = 0;
	break;

case SEND_NEXT_CLIENT:
	cmd = 0x21;
	for(i = 0;i < SERIAL_BUFF_SIZE;i++)
	{
		tempx[i] = cmd;
		if(++cmd > 0x7e)
			cmd = 0x21;
	}
	send_msg(200,(UCHAR*)&tempx[j], SEND_MESSAGE, next_client);
	uSleep(0,TIME_DELAY/10);
	send_msg(1,(UCHAR*)&tempx[j], SEND_NEXT_CLIENT, next_client);
	j++;
	if(j > 10)
		j = 0;
	break;


git ls-tree --full-tree -r --name-only HEAD

on board with door meant for NW corner, the converter board to the left 
of the TS-4600 board has 8 wires from DIO1 starting from the right w/ 4

DIO pins on bottom right of card when 
looking down at it with eth port to 
the right

gnd	x	x	15	x	x	x	x
14	13	11	10	8	7	6	4

pin 4	DQ
pin 6	CLK
pin 7 	RST_0
pin 8	RST_1
pin 10	RST_2
pin 11	RST_3
pin 13	RST_4
pin 14	RST_5
pin 15	RST_6	// probably won't use this - 2 conv chips 
				// make only 8 lines 
