
peek8
nbus_poke16(MW_ADR, adr >> 11);
nbus_poke16(MW_CONF, (adr & 0x7ff) | (0x18 << 11));
return nbus_peek16(MW_DAT1) & 0xff;

poke8
nbus_poke16(MW_ADR, adr >> 11);
nbus_poke16(MW_CONF, (adr & 0x7ff) | (0x18 << 11));
nbus_poke16(MW_DAT1, dat);

peek16
nbus_poke16(MW_ADR, adr >> 11);
nbus_poke16(MW_CONF, (adr & 0x7ff) | (0x10 << 11));
retVal = nbus_peek16(MW_DAT1);        

poke16
nbus_poke16(MW_ADR, adr >> 11);
nbus_poke16(MW_CONF, (adr & 0x7ff) | (0x10 << 11));
nbus_poke16(MW_DAT1, dat);

peek32
nbus_poke16(MW_ADR, adr >> 11);
nbus_poke16(MW_CONF, (adr & 0x7ff) | (0x0d << 11));
ret = nbus_peek16(MW_DAT2);
ret |= (nbus_peek16(MW_DAT2) << 16);

poke32
nbus_poke16(MW_ADR, adr >> 11);
nbus_poke16(MW_CONF, (adr & 0x7ff) | (0x0d << 11));
nbus_poke16(MW_DAT2, dat & 0xffff);
nbus_poke16(MW_DAT2, dat >> 16);

for 16 bit:
0x10	00010000
0x12	00010010
0x14	00010100
0x16	00010110

8	18	00011000	normal;					0x18 
8	18	00011010	two-cycle split			0x1A		<- use this one 
8	18	00011100	two-cycle combine		0x1C
8	18	00011110	combo					0x1E

16	10	00010 000	normal;
32	0d	00001 101	two-cycle combine 

You absolutely need to be using the 8 bit modes of winpeek/poke. 
Or, 16-bit split transaction accesses, but the functions by default use "normal" 
mode which would be a 16-bit transaction. 
You would need to modify nbus.c to write a value of 0x1 to bits 13:12 to do a split cycle. 
I would recommend testing with the 8-bit functions and ensuring those work as expected.

The MUXBUS memory window is at TS-4600 FPGA address 0x70 ​through 0x76 and has the following layout:

 * Register map:
 * base + 0x0: Upper address reg, address bits 26-11 (RW)
 * base + 0x2: WISHBONE config reg (RW)
 *   bit 15-14: bus width
 *     0 - reserved
 *     1 - 32 bit
 *     2 - 16 bit
 *     3 - 8 bit
 *   bit 13-12: Data reg #2 config (RW)
 *     0 - normal
 *     1 - two-cycle split (16bit in -> 2x 8bit cycles out)
 *     2 - two-cycle combine (2x 16bit cycles -> 32bit cycle)
 *     3 - combo adr/data write (8 LSBs: data, 8 MSBs: override 8 LSBS of adr)
 *   bit 11: Data reg #2 auto-increment enable
 *   bit 10-0: lower address reg, address bits 10-0 
 *
 * * Two-cycle combine reads/writes should first read/write the lower (LSB) 
 *   address to properly be combined.  The address is always auto-incremented. 
 *
 * * After a combo adr/data write cycle, the address reg points to the address
 *   that was previously written with optional auto-increment by 1.
 *
 * base + 0x4: Data reg #1 - never auto-increments (RW)
 * base + 0x6: Data reg #2 - side-effects as configured in WB config reg (RW)
